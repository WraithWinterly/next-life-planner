// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Task {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  completed              Boolean                 @default(false)
  user                   User?                   @relation(fields: [userId], references: [id])
  userId                 String?
  everydayCompletedDates EverydayCompletedDate[]
  todayTaskDate          DateTime                @default(now())
  taskType               TaskType                @default(TODAY)

  @@index([userId])
}

model EverydayCompletedDate {
  id     String   @id @default(cuid())
  date   DateTime
  task   Task?    @relation(fields: [taskId], references: [id])
  taskId String?

  @@index([taskId])
}

enum TaskType {
  TODAY
  EVERYDAY
}
